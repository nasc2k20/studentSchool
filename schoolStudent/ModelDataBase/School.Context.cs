//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace schoolStudent.ModelDataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolEntities : DbContext
    {
        public SchoolEntities()
            : base("name=SchoolEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Student> Student { get; set; }
    
        public virtual ObjectResult<sp_StudentAllData_Result> sp_StudentAllData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StudentAllData_Result>("sp_StudentAllData");
        }
    
        public virtual int sp_StudentDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_StudentDelete", idParameter);
        }
    
        public virtual int sp_StudentInsert(string studentCode, string nameStudent, Nullable<System.DateTime> birthDate, string gender, Nullable<int> gradeId, string comments)
        {
            var studentCodeParameter = studentCode != null ?
                new ObjectParameter("StudentCode", studentCode) :
                new ObjectParameter("StudentCode", typeof(string));
    
            var nameStudentParameter = nameStudent != null ?
                new ObjectParameter("NameStudent", nameStudent) :
                new ObjectParameter("NameStudent", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_StudentInsert", studentCodeParameter, nameStudentParameter, birthDateParameter, genderParameter, gradeIdParameter, commentsParameter);
        }
    
        public virtual ObjectResult<sp_StudentOneData_Result> sp_StudentOneData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StudentOneData_Result>("sp_StudentOneData", idParameter);
        }
    
        public virtual int sp_StudentUpdate(Nullable<int> id, string studentCode, string nameStudent, Nullable<System.DateTime> birthDate, string gender, string comments)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var studentCodeParameter = studentCode != null ?
                new ObjectParameter("StudentCode", studentCode) :
                new ObjectParameter("StudentCode", typeof(string));
    
            var nameStudentParameter = nameStudent != null ?
                new ObjectParameter("NameStudent", nameStudent) :
                new ObjectParameter("NameStudent", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_StudentUpdate", idParameter, studentCodeParameter, nameStudentParameter, birthDateParameter, genderParameter, commentsParameter);
        }
    }
}
